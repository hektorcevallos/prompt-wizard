{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Sparkles","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","Copy","x","y","rx","ry","RefreshCcw","Sun","cx","cy","r","Moon","App","persona","setPersona","useState","task","setTask","context","setContext","examples","setExamples","format","setFormat","constraints","setConstraints","generatedPrompt","setGeneratedPrompt","isLoading","setIsLoading","error","setError","showCopiedMessage","setShowCopiedMessage","isDarkMode","setIsDarkMode","savedMode","localStorage","getItem","JSON","parse","promptIdea","setPromptIdea","isPopulatingFromIdea","setIsPopulatingFromIdea","ideaError","setIdeaError","useEffect","document","documentElement","classList","add","body","remove","setItem","stringify","className","concat","onClick","toggleDarkMode","prevMode","title","size","htmlFor","id","rows","placeholder","value","onChange","e","target","async","trim","payload","contents","role","parts","text","generationConfig","responseMimeType","responseSchema","type","properties","apiUrl","response","fetch","method","headers","result","json","candidates","length","content","parsedJson","console","err","disabled","Fragment","required","userPrompt","chatHistory","push","populateWithMagicData","resetForm","copyToClipboard","textarea","appendChild","select","execCommand","removeChild","setTimeout","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.537bf0b9.chunk.js","sourcesContent":["import React from 'react'; // This line is crucial for JSX to work\nimport { useState, useEffect } from 'react';\n\n// Icons from Lucide React\nconst Sparkles = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <path d=\"M12 2v2\" /><path d=\"M12 20v2\" /><path d=\"M20 12h2\" /><path d=\"M2 12h2\" /><path d=\"m18 18-1.4-1.4\" /><path d=\"m6.4 6.4-1.4-1.4\" /><path d=\"m18 6.4-1.4 1.4\" /><path d=\"m6.4 17.6-1.4 1.4\" />\n  </svg>\n);\nconst Copy = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" /><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n  </svg>\n);\nconst RefreshCcw = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\" /><path d=\"M21 3v5h-5\" /><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\" /><path d=\"M3 21v-5h5\" />\n  </svg>\n);\nconst Sun = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <circle cx=\"12\" cy=\"12\" r=\"4\" /><path d=\"M12 2v2\" /><path d=\"M12 20v2\" /><path d=\"M20 12h2\" /><path d=\"M2 12h2\" /><path d=\"m18.36 5.64-1.42 1.42\" /><path d=\"m6.05 17.95-1.42 1.42\" /><path d=\"m5.64 5.64 1.42 1.42\" /><path d=\"m17.95 18.36 1.42 1.42\" />\n  </svg>\n);\nconst Moon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <path d=\"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z\" />\n  </svg>\n);\n\n\nconst App = () => {\n  // State for different parts of the prompt\n  const [persona, setPersona] = useState('');\n  const [task, setTask] = useState('');\n  const [context, setContext] = useState('');\n  const [examples, setExamples] = useState('');\n  const [format, setFormat] = useState('');\n  const [constraints, setConstraints] = useState('');\n\n  // State for the generated prompt and loading status\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showCopiedMessage, setShowCopiedMessage] = useState(false);\n\n  // State for dark mode\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Initialize dark mode from localStorage or default to false\n    const savedMode = localStorage.getItem('isDarkMode');\n    return savedMode ? JSON.parse(savedMode) : false;\n  });\n\n  // State for \"Idea to Prompt\" feature\n  const [promptIdea, setPromptIdea] = useState('');\n  const [isPopulatingFromIdea, setIsPopulatingFromIdea] = useState(false);\n  const [ideaError, setIdeaError] = useState('');\n\n\n  // Effect to apply dark mode class to body and save preference\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n      document.body.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      document.body.classList.remove('dark');\n    }\n    localStorage.setItem('isDarkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n\n  // Function to toggle dark mode\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // Function to generate the prompt using the LLM\n  const generatePrompt = async () => {\n    setIsLoading(true);\n    setError('');\n    setGeneratedPrompt('');\n\n    // Construct the prompt for the LLM based on user inputs\n    const userPrompt = `\n      You are an expert prompt engineer. Your task is to create a highly effective and well-structured prompt for a large language model, following best practices.\n      Consider the following elements provided by the user:\n\n      ${persona ? `Persona: ${persona}` : ''}\n      ${task ? `Task: ${task}` : ''}\n      ${context ? `Context: ${context}` : ''}\n      ${examples ? `Examples (if any, provide them clearly): ${examples}` : ''}\n      ${format ? `Desired Output Format: ${format}` : ''}\n      ${constraints ? `Constraints/Guardrails: ${constraints}` : ''}\n\n      Combine these elements into a single, clear, concise, and powerful prompt.\n      Ensure the prompt is actionable and leaves no room for ambiguity.\n      Start the generated prompt with \"You are a helpful assistant.\" or a suitable persona if provided.\n      Do not include any conversational text outside of the prompt itself.\n    `.trim();\n\n    try {\n      // LLM API call\n      let chatHistory = [];\n      chatHistory.push({ role: \"user\", parts: [{ text: userPrompt }] });\n      const payload = { contents: chatHistory };\n      const apiKey = \"\"; // Canvas will provide this if empty\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n\n      const result = await response.json();\n\n      if (result.candidates && result.candidates.length > 0 &&\n          result.candidates[0].content && result.candidates[0].content.parts &&\n          result.candidates[0].content.parts.length > 0) {\n        setGeneratedPrompt(result.candidates[0].content.parts[0].text);\n      } else {\n        setError('Failed to generate prompt. Please try again.');\n        console.error('LLM response structure unexpected:', result);\n      }\n    } catch (err) {\n      setError('An error occurred while generating the prompt. Please check your network connection and try again.');\n      console.error('Error during LLM API call:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to copy the generated prompt to clipboard\n  const copyToClipboard = () => {\n    if (generatedPrompt) {\n      const textarea = document.createElement('textarea');\n      textarea.value = generatedPrompt;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy'); // Fallback for navigator.clipboard.writeText()\n      document.body.removeChild(textarea);\n\n      setShowCopiedMessage(true);\n      setTimeout(() => setShowCopiedMessage(false), 2000); // Hide message after 2 seconds\n    }\n  };\n\n  // Function to reset all input fields and generated prompt\n  const resetForm = () => {\n    setPersona('');\n    setTask('');\n    setContext('');\n    setExamples('');\n    setFormat('');\n    setConstraints('');\n    setGeneratedPrompt('');\n    setError('');\n    setIdeaError('');\n    setPromptIdea('');\n    setIsLoading(false);\n    setIsPopulatingFromIdea(false);\n  };\n\n  // Function to populate fields with sample data\n  const populateWithMagicData = () => {\n    setPersona('You are a highly creative content writer specializing in science fiction.');\n    setTask('Write a short story about the discovery of a new alien civilization.');\n    setContext('The story should be set on a newly discovered exoplanet, Kepler-186f, and focus on the initial contact.');\n    setExamples('Input: \"Describe the alien life form.\" Output: \"The creature was bioluminescent, with multiple limbs and a crystalline exoskeleton.\"');\n    setFormat('The story should be exactly 5 paragraphs long, with each paragraph focusing on a different aspect of the discovery (approach, landing, first contact, communication attempt, implications).');\n    setConstraints('Avoid any violent encounters. The tone should be one of wonder and scientific curiosity. Do not exceed 500 words.');\n    setGeneratedPrompt(''); // Clear any previously generated prompt\n    setError('');\n    setIdeaError('');\n    setPromptIdea('');\n  };\n\n  // Function to populate sections from a simple prompt idea using LLM\n  const populateFromIdea = async () => {\n    setIsPopulatingFromIdea(true);\n    setIdeaError('');\n    setError(''); // Clear any previous errors\n    setGeneratedPrompt(''); // Clear generated prompt\n\n    if (!promptIdea.trim()) {\n      setIdeaError('Please enter a prompt idea.');\n      setIsPopulatingFromIdea(false);\n      return;\n    }\n\n    const ideaPrompt = `\n      You are an expert prompt engineer. A user will provide a simple idea for a prompt. Your task is to break down this idea into the following components: persona, task, context, examples, format, and constraints. Provide the output in a JSON object with these keys. If a component is not explicitly mentioned or implied, leave its value as an empty string. For 'examples', provide a brief illustrative example if possible, otherwise an empty string.\n\n      User Idea: ${promptIdea}\n    `.trim();\n\n    const payload = {\n      contents: [{ role: \"user\", parts: [{ text: ideaPrompt }] }],\n      generationConfig: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"OBJECT\",\n          properties: {\n            \"persona\": { \"type\": \"STRING\" },\n            \"task\": { \"type\": \"STRING\" },\n            \"context\": { \"type\": \"STRING\" },\n            \"examples\": { \"type\": \"STRING\" },\n            \"format\": { \"type\": \"STRING\" },\n            \"constraints\": { \"type\": \"STRING\" }\n          },\n          \"propertyOrdering\": [\"persona\", \"task\", \"context\", \"examples\", \"format\", \"constraints\"]\n        }\n      }\n    };\n\n    const apiKey = \"\"; // Canvas will provide this if empty\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n\n      const result = await response.json();\n\n      if (result.candidates && result.candidates.length > 0 &&\n          result.candidates[0].content && result.candidates[0].content.parts &&\n          result.candidates[0].content.parts.length > 0) {\n        const json = result.candidates[0].content.parts[0].text;\n        const parsedJson = JSON.parse(json);\n\n        setPersona(parsedJson.persona || '');\n        setTask(parsedJson.task || '');\n        setContext(parsedJson.context || '');\n        setExamples(parsedJson.examples || '');\n        setFormat(parsedJson.format || '');\n        setConstraints(parsedJson.constraints || '');\n      } else {\n        setIdeaError('Failed to parse idea into sections. Please try a different idea or fill manually.');\n        console.error('LLM response structure unexpected for idea parsing:', result);\n      }\n    } catch (err) {\n      setIdeaError('An error occurred while processing your idea. Please try again.');\n      console.error('Error during LLM API call for idea parsing:', err);\n    } finally {\n      setIsPopulatingFromIdea(false);\n    }\n  };\n\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'bg-gradient-to-br from-gray-900 to-gray-800 text-gray-200' : 'bg-gradient-to-br from-blue-50 to-indigo-100 text-gray-800'} p-4 sm:p-8 font-sans flex items-center justify-center transition-colors duration-300`}>\n      <div className={`w-full max-w-4xl ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-blue-200'} rounded-xl shadow-2xl p-6 sm:p-10 border relative`}>\n        {/* Dark Mode Toggle Button */}\n        <button\n          onClick={toggleDarkMode}\n          className={`absolute top-4 right-4 p-2 rounded-full transition-colors duration-300\n            ${isDarkMode ? 'bg-gray-600 text-yellow-300 hover:bg-gray-500' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}\n            shadow-md transform hover:scale-110`}\n          title={isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\n        >\n          {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}\n        </button>\n\n        <h1 className={`text-4xl font-extrabold text-center ${isDarkMode ? 'text-indigo-400' : 'text-indigo-700'} mb-8 tracking-tight`}>\n          <Sparkles className=\"inline-block mr-3 text-yellow-500\" size={32} />\n          Prompt Wizard\n        </h1>\n\n        <p className={`text-center ${isDarkMode ? 'text-gray-300' : 'text-gray-600'} mb-10 text-lg leading-relaxed`}>\n          Craft powerful prompts for large language models. Fill in the sections below to guide the AI.\n        </p>\n\n        {/* Idea to Prompt Section */}\n        <div className={`mb-8 p-5 rounded-lg shadow-inner ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-200'}`}>\n          <label htmlFor=\"promptIdea\" className={`block text-lg font-semibold ${isDarkMode ? 'text-blue-300' : 'text-blue-700'} mb-2`}>\n            Idea to Prompt\n          </label>\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <textarea\n              id=\"promptIdea\"\n              className={`flex-grow p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[60px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-blue-500' : 'bg-white border-blue-300 text-gray-800 focus:ring-blue-400'}`}\n              rows=\"2\"\n              placeholder=\"e.g., 'Write a poem about nature in haiku format.'\"\n              value={promptIdea}\n              onChange={(e) => setPromptIdea(e.target.value)}\n            ></textarea>\n            <button\n              onClick={populateFromIdea}\n              className={`flex-shrink-0 flex items-center justify-center px-6 py-2 rounded-full text-lg font-bold transition duration-300 ease-in-out\n                ${isPopulatingFromIdea ? 'bg-gray-400 cursor-not-allowed' : 'bg-gradient-to-r from-blue-500 to-teal-600 hover:from-blue-600 hover:to-teal-700 text-white shadow-lg transform hover:scale-105'}`}\n              disabled={isPopulatingFromIdea || !promptIdea.trim()}\n            >\n              {isPopulatingFromIdea ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Populating...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"mr-2\" /> Populate Sections\n                </>\n              )}\n            </button>\n          </div>\n          {ideaError && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mt-4\" role=\"alert\">\n              <strong className=\"font-bold\">Error:</strong>\n              <span className=\"block sm:inline ml-2\">{ideaError}</span>\n            </div>\n          )}\n        </div>\n\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n          {/* Persona Input */}\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-blue-50 border-blue-100'} p-5 rounded-lg shadow-sm border`}>\n            <label htmlFor=\"persona\" className={`block text-lg font-semibold ${isDarkMode ? 'text-blue-300' : 'text-blue-700'} mb-2`}>\n              Persona <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm font-normal`}>(Optional)</span>\n            </label>\n            <textarea\n              id=\"persona\"\n              className={`w-full p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[80px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-blue-500' : 'bg-white border-blue-300 text-gray-800 focus:ring-blue-400'}`}\n              rows=\"3\"\n              placeholder=\"e.g., 'You are a helpful customer service agent.' or 'Act as a senior software engineer.'\"\n              value={persona}\n              onChange={(e) => setPersona(e.target.value)}\n            ></textarea>\n            <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm mt-2`}>Define the role or character the AI should adopt.</p>\n          </div>\n\n          {/* Task Input */}\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-green-50 border-green-100'} p-5 rounded-lg shadow-sm border`}>\n            <label htmlFor=\"task\" className={`block text-lg font-semibold ${isDarkMode ? 'text-green-300' : 'text-green-700'} mb-2`}>\n              Task <span className=\"text-red-500\">*</span>\n            </label>\n            <textarea\n              id=\"task\"\n              className={`w-full p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[80px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-green-500' : 'bg-white border-green-300 text-gray-800 focus:ring-green-400'}`}\n              rows=\"3\"\n              placeholder=\"e.g., 'Summarize the following article.' or 'Generate a creative story about a space explorer.'\"\n              value={task}\n              onChange={(e) => setTask(e.target.value)}\n              required\n            ></textarea>\n            <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm mt-2`}>Clearly state what you want the AI to do.</p>\n          </div>\n\n          {/* Context Input */}\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-purple-50 border-purple-100'} p-5 rounded-lg shadow-sm border`}>\n            <label htmlFor=\"context\" className={`block text-lg font-semibold ${isDarkMode ? 'text-purple-300' : 'text-purple-700'} mb-2`}>\n              Context <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm font-normal`}>(Optional)</span>\n            </label>\n            <textarea\n              id=\"context\"\n              className={`w-full p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[80px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-purple-500' : 'bg-white border-purple-300 text-gray-800 focus:ring-purple-400'}`}\n              rows=\"3\"\n              placeholder=\"e.g., 'The article is about renewable energy sources.' or 'The story should be set in a dystopian future.'\"\n              value={context}\n              onChange={(e) => setContext(e.target.value)}\n            ></textarea>\n            <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm mt-2`}>Provide any background information or relevant details.</p>\n          </div>\n\n          {/* Examples Input */}\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-yellow-50 border-yellow-100'} p-5 rounded-lg shadow-sm border`}>\n            <label htmlFor=\"examples\" className={`block text-lg font-semibold ${isDarkMode ? 'text-yellow-300' : 'text-yellow-700'} mb-2`}>\n              Examples <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm font-normal`}>(Optional)</span>\n            </label>\n            <textarea\n              id=\"examples\"\n              className={`w-full p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[80px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-yellow-500' : 'bg-white border-yellow-300 text-gray-800 focus:ring-yellow-400'}`}\n              rows=\"3\"\n              placeholder=\"e.g., 'Input: 'Hello' Output: 'Hi there!''\"\n              value={examples}\n              onChange={(e) => setExamples(e.target.value)}\n            ></textarea>\n            <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm mt-2`}>Provide few-shot examples to guide the AI's output style.</p>\n          </div>\n\n          {/* Format Input */}\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-red-50 border-red-100'} p-5 rounded-lg shadow-sm border`}>\n            <label htmlFor=\"format\" className={`block text-lg font-semibold ${isDarkMode ? 'text-red-300' : 'text-red-700'} mb-2`}>\n              Output Format <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm font-normal`}>(Optional)</span>\n            </label>\n            <textarea\n              id=\"format\"\n              className={`w-full p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[80px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-red-500' : 'bg-white border-red-300 text-gray-800 focus:ring-red-400'}`}\n              rows=\"3\"\n              placeholder=\"e.g., 'JSON format with keys: title, summary, keywords.' or 'Bullet points.'\"\n              value={format}\n              onChange={(e) => setFormat(e.target.value)}\n            ></textarea>\n            <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm mt-2`}>Specify how you want the AI's response to be structured.</p>\n          </div>\n\n          {/* Constraints Input */}\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-teal-50 border-teal-100'} p-5 rounded-lg shadow-sm border`}>\n            <label htmlFor=\"constraints\" className={`block text-lg font-semibold ${isDarkMode ? 'text-teal-300' : 'text-teal-700'} mb-2`}>\n              Constraints/Guardrails <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm font-normal`}>(Optional)</span>\n            </label>\n            <textarea\n              id=\"constraints\"\n              className={`w-full p-3 border rounded-md focus:ring-2 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[80px]\n                ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100 focus:ring-teal-500' : 'bg-white border-teal-300 text-gray-800 focus:ring-teal-400'}`}\n              rows=\"3\"\n              placeholder=\"e.g., 'Response should be under 100 words.' or 'Do not use offensive language.'\"\n              value={constraints}\n              onChange={(e) => setConstraints(e.target.value)}\n            ></textarea>\n            <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-sm mt-2`}>Set any limitations or rules for the AI's behavior.</p>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row justify-center gap-4 mb-8\">\n          <button\n            onClick={generatePrompt}\n            className={`flex items-center justify-center px-8 py-3 rounded-full text-lg font-bold transition duration-300 ease-in-out\n              ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-gradient-to-r from-indigo-500 to-blue-600 hover:from-indigo-600 hover:to-blue-700 text-white shadow-lg transform hover:scale-105'}`}\n            disabled={isLoading || !task}\n          >\n            {isLoading ? (\n              <>\n                <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Generating...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2\" /> Generate Prompt\n              </>\n            )}\n          </button>\n          <button\n            onClick={populateWithMagicData}\n            className={`flex items-center justify-center px-8 py-3 rounded-full text-lg font-bold shadow-md transition duration-300 ease-in-out transform hover:scale-105\n              ${isDarkMode ? 'text-purple-300 bg-purple-800 hover:bg-purple-700' : 'text-purple-700 bg-purple-200 hover:bg-purple-300'}`}\n          >\n            <Sparkles className=\"mr-2\" /> Magic Fill\n          </button>\n          <button\n            onClick={resetForm}\n            className={`flex items-center justify-center px-8 py-3 rounded-full text-lg font-bold shadow-md transition duration-300 ease-in-out transform hover:scale-105\n              ${isDarkMode ? 'text-gray-300 bg-gray-600 hover:bg-gray-500' : 'text-gray-700 bg-gray-200 hover:bg-gray-300'}`}\n          >\n            <RefreshCcw className=\"mr-2\" /> Reset\n          </button>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-6\" role=\"alert\">\n            <strong className=\"font-bold\">Error:</strong>\n            <span className=\"block sm:inline ml-2\">{error}</span>\n          </div>\n        )}\n\n        {/* Generated Prompt Display */}\n        {generatedPrompt && (\n          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-gray-50 border-gray-200'} p-6 rounded-lg shadow-inner border relative`}>\n            <h2 className={`text-2xl font-bold ${isDarkMode ? 'text-gray-200' : 'text-gray-700'} mb-4 flex items-center`}>\n              <Sparkles className=\"inline-block mr-2 text-yellow-500\" /> Your Generated Prompt:\n            </h2>\n            <pre className={`whitespace-pre-wrap break-words p-4 rounded-md text-base leading-relaxed border\n              ${isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-100' : 'bg-gray-100 border-gray-300 text-gray-800'}`}>\n              {generatedPrompt}\n            </pre>\n            <button\n              onClick={copyToClipboard}\n              className=\"absolute top-4 right-4 bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full shadow-md transition duration-200 ease-in-out transform hover:scale-110\"\n              title=\"Copy to Clipboard\"\n            >\n              <Copy size={20} />\n            </button>\n            {showCopiedMessage && (\n              <span className=\"absolute top-16 right-4 text-sm text-green-600 bg-green-50 px-3 py-1 rounded-md shadow-sm animate-fade-in-out\">\n                Copied!\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}